(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{514:function(e,a,t){"use strict";t.r(a);var v=t(28),n=Object(v.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"es6-知识点及常考面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6-知识点及常考面试题"}},[e._v("#")]),e._v(" ES6 知识点及常考面试题")]),e._v(" "),t("p",[e._v("本章节我们将来学习 ES6 部分的内容。")]),e._v(" "),t("h2",{attrs:{id:"var、let-及-const-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#var、let-及-const-区别"}},[e._v("#")]),e._v(" var、let 及 const 区别")]),e._v(" "),t("blockquote",[t("p",[e._v("涉及面试题：什么是提升？什么是暂时性死区？var、let 及 const 区别？")])]),e._v(" "),t("p",[e._v("对于这个问题，我们应该先来了解提升（hoisting）这个概念。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("console.log(a) // undefined\nvar a = 1\n\n")])])]),t("p",[e._v("从上述代码中我们可以发现，虽然变量还没有被声明，但是我们却可以使用这个未被声明的变量，这种情况就叫做提升，并且提升的是声明。")]),e._v(" "),t("p",[e._v("对于这种情况，我们可以把代码这样来看")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var a\nconsole.log(a) // undefined\na = 1\n\n")])])]),t("p",[e._v("接下来我们再来看一个例子")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var a = 10\nvar a\nconsole.log(a)\n\n")])])]),t("p",[e._v("对于这个例子，如果你认为打印的值为 "),t("code",[e._v("undefined")]),e._v(" 那么就错了，答案应该是 "),t("code",[e._v("10")]),e._v("，对于这种情况，我们这样来看代码")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var a\nvar a\na = 10\nconsole.log(a)\n\n")])])]),t("p",[e._v("到这里为止，我们已经了解了 "),t("code",[e._v("var")]),e._v(" 声明的变量会发生提升的情况，其实不仅变量会提升函数也会被提升。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("console.log(a) // ƒ a() {}\nfunction a() {}\nvar a = 1\n\n")])])]),t("p",[e._v("对于上述代码，打印结果会是 "),t("code",[e._v("ƒ a() {}")]),e._v("，即使变量声明在函数之后，这也说明了函数会被提升，并且优先于变量提升。")]),e._v(" "),t("p",[e._v("说完了这些，想必大家也知道 "),t("code",[e._v("var")]),e._v(" 存在的问题了，使用 "),t("code",[e._v("var")]),e._v(" 声明的变量会被提升到作用域的顶部，接下来我们再来看 "),t("code",[e._v("let")]),e._v(" 和 "),t("code",[e._v("const")]),e._v(" 。")]),e._v(" "),t("p",[e._v("我们先来看一个例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var a = 1\nlet b = 1\nconst c = 1\nconsole.log(window.b) // undefined\nconsole.log(window. c) // undefined\n\nfunction test(){\n  console.log(a)\n  let a\n}\ntest()\n\n")])])]),t("p",[e._v("首先在全局作用域下使用 "),t("code",[e._v("let")]),e._v(" 和 "),t("code",[e._v("const")]),e._v(" 声明变量，变量并不会被挂载到 "),t("code",[e._v("window")]),e._v(" 上，这一点就和 "),t("code",[e._v("var")]),e._v(" 声明有了区别。")]),e._v(" "),t("p",[e._v("再者当我们在声明 "),t("code",[e._v("a")]),e._v(" 之前如果使用了 "),t("code",[e._v("a")]),e._v("，就会出现报错的情况")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/11/18/1672730318cfa540?w=447&h=49&f=png&s=10542",alt:""}})]),e._v(" "),t("p",[e._v("你可能会认为这里也出现了提升的情况，但是因为某些原因导致不能访问。")]),e._v(" "),t("p",[e._v("首先报错的原因是因为存在暂时性死区，我们不能在声明前就使用变量，这也是 "),t("code",[e._v("let")]),e._v(" 和 "),t("code",[e._v("const")]),e._v(" 优于 "),t("code",[e._v("var")]),e._v(" 的一点。然后这里你认为的提升和 "),t("code",[e._v("var")]),e._v(" 的提升是有区别的，虽然变量在编译的环节中被告知在这块作用域中可以访问，但是访问是受限制的。")]),e._v(" "),t("p",[e._v("那么到这里，想必大家也都明白 "),t("code",[e._v("var")]),e._v("、"),t("code",[e._v("let")]),e._v(" 及 "),t("code",[e._v("const")]),e._v(" 区别了，不知道你是否会有这么一个疑问，为什么要存在提升这个事情呢，其实提升存在的根本原因就是为了解决函数间互相调用的情况")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function test1() {\n    test2()\n}\nfunction test2() {\n    test1()\n}\ntest1()\n\n")])])]),t("p",[e._v("假如不存在提升这个情况，那么就实现不了上述的代码，因为不可能存在 "),t("code",[e._v("test1")]),e._v(" 在 "),t("code",[e._v("test2")]),e._v(" 前面然后 "),t("code",[e._v("test2")]),e._v(" 又在 "),t("code",[e._v("test1")]),e._v(" 前面。")]),e._v(" "),t("p",[e._v("那么最后我们总结下这小节的内容：")]),e._v(" "),t("ul",[t("li",[e._v("函数提升优先于变量提升，函数提升会把整个函数挪到作用域顶部，变量提升只会把声明挪到作用域顶部")]),e._v(" "),t("li",[t("code",[e._v("var")]),e._v(" 存在提升，我们能在声明之前使用。"),t("code",[e._v("let")]),e._v("、"),t("code",[e._v("const")]),e._v(" 因为暂时性死区的原因，不能在声明前使用")]),e._v(" "),t("li",[t("code",[e._v("var")]),e._v(" 在全局作用域下声明变量会导致变量挂载在 "),t("code",[e._v("window")]),e._v(" 上，其他两者不会")]),e._v(" "),t("li",[t("code",[e._v("let")]),e._v(" 和 "),t("code",[e._v("const")]),e._v(" 作用基本一致，但是后者声明的变量不能再次赋值")])]),e._v(" "),t("h2",{attrs:{id:"原型继承和-class-继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原型继承和-class-继承"}},[e._v("#")]),e._v(" 原型继承和 Class 继承")]),e._v(" "),t("blockquote",[t("p",[e._v("涉及面试题：原型如何实现继承？Class 如何实现继承？Class 本质是什么？")])]),e._v(" "),t("p",[e._v("首先先来讲下 "),t("code",[e._v("class")]),e._v("，其实在 JS 中并不存在类，"),t("code",[e._v("class")]),e._v(" 只是语法糖，本质还是函数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Person {}\nPerson instanceof Function // true\n\n")])])]),t("p",[e._v("在上一章节中我们讲解了原型的知识点，在这一小节中我们将会使用分别使用原型和 "),t("code",[e._v("class")]),e._v(" 的方式来实现继承。")]),e._v(" "),t("h3",{attrs:{id:"组合继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合继承"}},[e._v("#")]),e._v(" 组合继承")]),e._v(" "),t("p",[e._v("组合继承是最常用的继承方式，")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function Parent(value) {\n  this.val = value\n}\nParent.prototype.getValue = function() {\n  console.log(this.val)\n}\nfunction Child(value) {\n  Parent.call(this, value)\n}\nChild.prototype = new Parent()\n\nconst child = new Child(1)\n\nchild.getValue() // 1\nchild instanceof Parent // true\n\n")])])]),t("p",[e._v("以上继承的方式核心是在子类的构造函数中通过 "),t("code",[e._v("Parent.call(this)")]),e._v(" 继承父类的属性，然后改变子类的原型为 "),t("code",[e._v("new Parent()")]),e._v(" 来继承父类的函数。")]),e._v(" "),t("p",[e._v("这种继承方式优点在于构造函数可以传参，不会与父类引用属性共享，可以复用父类的函数，但是也存在一个缺点就是在继承父类函数的时候调用了父类构造函数，导致子类的原型上多了不需要的父类属性，存在内存上的浪费。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/11/19/1672aeb24a2e2cae?w=319&h=105&f=png&s=9858",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"寄生组合继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#寄生组合继承"}},[e._v("#")]),e._v(" 寄生组合继承")]),e._v(" "),t("p",[e._v("这种继承方式对组合继承进行了优化，组合继承缺点在于继承父类函数时调用了构造函数，我们只需要优化掉这点就行了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function Parent(value) {\n  this.val = value\n}\nParent.prototype.getValue = function() {\n  console.log(this.val)\n}\n\nfunction Child(value) {\n  Parent.call(this, value)\n}\nChild.prototype = Object.create(Parent.prototype, {\n  constructor: {\n    value: Child,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  }\n})\n\nconst child = new Child(1)\n\nchild.getValue() // 1\nchild instanceof Parent // true\n\n")])])]),t("p",[e._v("以上继承实现的核心就是将父类的原型赋值给了子类，并且将构造函数设置为子类，这样既解决了无用的父类属性问题，还能正确的找到子类的构造函数。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/11/19/1672afb8dfa21361?w=358&h=101&f=png&s=11092",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"class-继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-继承"}},[e._v("#")]),e._v(" Class 继承")]),e._v(" "),t("p",[e._v("以上两种继承方式都是通过原型去解决的，在 ES6 中，我们可以使用 "),t("code",[e._v("class")]),e._v(" 去实现继承，并且实现起来很简单")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Parent {\n  constructor(value) {\n    this.val = value\n  }\n  getValue() {\n    console.log(this.val)\n  }\n}\nclass Child extends Parent {\n  constructor(value) {\n    super(value)\n    this.val = value\n  }\n}\nlet child = new Child(1)\nchild.getValue() // 1\nchild instanceof Parent // true\n\n")])])]),t("p",[t("code",[e._v("class")]),e._v(" 实现继承的核心在于使用 "),t("code",[e._v("extends")]),e._v(" 表明继承自哪个父类，并且在子类构造函数中必须调用 "),t("code",[e._v("super")]),e._v("，因为这段代码可以看成 "),t("code",[e._v("Parent.call(this, value)")]),e._v("。")]),e._v(" "),t("p",[e._v("当然了，之前也说了在 JS 中并不存在类，"),t("code",[e._v("class")]),e._v(" 的本质就是函数。")]),e._v(" "),t("h2",{attrs:{id:"模块化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块化"}},[e._v("#")]),e._v(" 模块化")]),e._v(" "),t("blockquote",[t("p",[e._v("涉及面试题：为什么要使用模块化？都有哪几种方式可以实现模块化，各有什么特点？")])]),e._v(" "),t("p",[e._v("使用一个技术肯定是有原因的，那么使用模块化可以给我们带来以下好处")]),e._v(" "),t("ul",[t("li",[e._v("解决命名冲突")]),e._v(" "),t("li",[e._v("提供复用性")]),e._v(" "),t("li",[e._v("提高代码可维护性")])]),e._v(" "),t("h3",{attrs:{id:"立即执行函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#立即执行函数"}},[e._v("#")]),e._v(" 立即执行函数")]),e._v(" "),t("p",[e._v("在早期，使用立即执行函数实现模块化是常见的手段，通过函数作用域解决了命名冲突、污染全局作用域的问题")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(function(globalVariable){\n   globalVariable.test = function() {}\n   // ... 声明各种变量、函数都不会污染全局作用域\n})(globalVariable)\n\n")])])]),t("h3",{attrs:{id:"amd-和-cmd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#amd-和-cmd"}},[e._v("#")]),e._v(" AMD 和 CMD")]),e._v(" "),t("p",[e._v("鉴于目前这两种实现方式已经很少见到，所以不再对具体特性细聊，只需要了解这两者是如何使用的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// AMD\ndefine(['./a', './b'], function(a, b) {\n  // 加载模块完毕可以使用\n  a.do()\n  b.do()\n})\n// CMD\ndefine(function(require, exports, module) {\n  // 加载模块\n  // 可以把 require 写在函数体的任意地方实现延迟加载\n  var a = require('./a')\n  a.doSomething()\n})\n\n")])])]),t("h3",{attrs:{id:"commonjs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#commonjs"}},[e._v("#")]),e._v(" CommonJS")]),e._v(" "),t("p",[e._v("CommonJS 最早是 Node 在使用，目前也仍然广泛使用，比如在 Webpack 中你就能见到它，当然目前在 Node 中的模块管理已经和 CommonJS 有一些区别了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// a.js\nmodule.exports = {\n    a: 1\n}\n// or \nexports.a = 1\n\n// b.js\nvar module = require('./a.js')\nmodule.a // -> log 1\n\n")])])]),t("p",[e._v("因为 CommonJS 还是会使用到的，所以这里会对一些疑难点进行解析")]),e._v(" "),t("p",[e._v("先说 "),t("code",[e._v("require")]),e._v(" 吧")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var module = require('./a.js')\nmodule.a \n// 这里其实就是包装了一层立即执行函数，这样就不会污染全局变量了，\n// 重要的是 module 这里，module 是 Node 独有的一个变量\nmodule.exports = {\n    a: 1\n}\n// module 基本实现\nvar module = {\n  id: 'xxxx', // 我总得知道怎么去找到他吧\n  exports: {} // exports 就是个空对象\n}\n// 这个是为什么 exports 和 module.exports 用法相似的原因\nvar exports = module.exports \nvar load = function (module) {\n    // 导出的东西\n    var a = 1\n    module.exports = a\n    return module.exports\n};\n// 然后当我 require 的时候去找到独特的\n// id，然后将要使用的东西用立即执行函数包装下，over\n\n")])])]),t("p",[e._v("另外虽然 "),t("code",[e._v("exports")]),e._v(" 和 "),t("code",[e._v("module.exports")]),e._v(" 用法相似，但是不能对 "),t("code",[e._v("exports")]),e._v(" 直接赋值。因为 "),t("code",[e._v("var exports = module.exports")]),e._v(" 这句代码表明了 "),t("code",[e._v("exports")]),e._v(" 和 "),t("code",[e._v("module.exports")]),e._v(" 享有相同地址，通过改变对象的属性值会对两者都起效，但是如果直接对 "),t("code",[e._v("exports")]),e._v(" 赋值就会导致两者不再指向同一个内存地址，修改并不会对 "),t("code",[e._v("module.exports")]),e._v(" 起效。")]),e._v(" "),t("h3",{attrs:{id:"es-module"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es-module"}},[e._v("#")]),e._v(" ES Module")]),e._v(" "),t("p",[e._v("ES Module 是原生实现的模块化方案，与 CommonJS 有以下几个区别")]),e._v(" "),t("ul",[t("li",[e._v("CommonJS 支持动态导入，也就是 "),t("code",[e._v("require(${path}/xx.js)")]),e._v("，后者目前不支持，但是已有提案")]),e._v(" "),t("li",[e._v("CommonJS 是同步导入，因为用于服务端，文件都在本地，同步导入即使卡住主线程影响也不大。而后者是异步导入，因为用于浏览器，需要下载文件，如果也采用同步导入会对渲染有很大影响")]),e._v(" "),t("li",[e._v("CommonJS 在导出时都是值拷贝，就算导出的值变了，导入的值也不会改变，所以如果想更新值，必须重新导入一次。但是 ES Module 采用实时绑定的方式，导入导出的值都指向同一个内存地址，所以导入值会跟随导出值变化")]),e._v(" "),t("li",[e._v("ES Module 会编译成 "),t("code",[e._v("require/exports")]),e._v(" 来执行的")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 引入模块 API\nimport XXX from './a.js'\nimport { XXX } from './a.js'\n// 导出模块 API\nexport function a() {}\nexport default function() {}\n\n")])])]),t("h2",{attrs:{id:"proxy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#proxy"}},[e._v("#")]),e._v(" Proxy")]),e._v(" "),t("blockquote",[t("p",[e._v("涉及面试题：Proxy 可以实现什么功能？")])]),e._v(" "),t("p",[e._v("如果你平时有关注 Vue 的进展的话，可能已经知道了在 Vue3.0 中将会通过 "),t("code",[e._v("Proxy")]),e._v(" 来替换原本的 "),t("code",[e._v("Object.defineProperty")]),e._v(" 来实现数据响应式。 Proxy 是 ES6 中新增的功能，它可以用来自定义对象中的操作。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let p = new Proxy(target, handler)\n\n")])])]),t("p",[t("code",[e._v("target")]),e._v(" 代表需要添加代理的对象，"),t("code",[e._v("handler")]),e._v(" 用来自定义对象中的操作，比如可以用来自定义 "),t("code",[e._v("set")]),e._v(" 或者 "),t("code",[e._v("get")]),e._v(" 函数。")]),e._v(" "),t("p",[e._v("接下来我们通过 "),t("code",[e._v("Proxy")]),e._v(" 来实现一个数据响应式")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let onWatch = (obj, setBind, getLogger) => {\n  let handler = {\n    get(target, property, receiver) {\n      getLogger(target, property)\n      return Reflect.get(target, property, receiver)\n    },\n    set(target, property, value, receiver) {\n      setBind(value, property)\n      return Reflect.set(target, property, value)\n    }\n  }\n  return new Proxy(obj, handler)\n}\n\nlet obj = { a: 1 }\nlet p = onWatch(\n  obj,\n  (v, property) => {\n    console.log(`监听到属性${property}改变为${v}`)\n  },\n  (target, property) => {\n    console.log(`'${property}' = ${target[property]}`)\n  }\n)\np.a = 2 // 监听到属性a改变\np.a // 'a' = 2\n\n")])])]),t("p",[e._v("在上述代码中，我们通过自定义 "),t("code",[e._v("set")]),e._v(" 和 "),t("code",[e._v("get")]),e._v(" 函数的方式，在原本的逻辑中插入了我们的函数逻辑，实现了在对对象任何属性进行读写时发出通知。")]),e._v(" "),t("p",[e._v("当然这是简单版的响应式实现，如果需要实现一个 Vue 中的响应式，需要我们在 "),t("code",[e._v("get")]),e._v(" 中收集依赖，在 "),t("code",[e._v("set")]),e._v(" 派发更新，之所以 Vue3.0 要使用 "),t("code",[e._v("Proxy")]),e._v(" 替换原本的 API 原因在于 "),t("code",[e._v("Proxy")]),e._v(" 无需一层层递归为每个属性添加代理，一次即可完成以上操作，性能上更好，并且原本的实现有一些数据更新不能监听到，但是 "),t("code",[e._v("Proxy")]),e._v(" 可以完美监听到任何方式的数据改变，唯一缺陷可能就是浏览器的兼容性不好了。")]),e._v(" "),t("h2",{attrs:{id:"map-filter-reduce"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map-filter-reduce"}},[e._v("#")]),e._v(" map, filter, reduce")]),e._v(" "),t("blockquote",[t("p",[e._v("涉及面试题：map, filter, reduce 各自有什么作用？")])]),e._v(" "),t("p",[t("code",[e._v("map")]),e._v(" 作用是生成一个新数组，遍历原数组，将每个元素拿出来做一些变换然后放入到新的数组中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[1, 2, 3].map(v => v + 1) // -> [2, 3, 4]\n\n")])])]),t("p",[e._v("另外 "),t("code",[e._v("map")]),e._v(" 的回调函数接受三个参数，分别是当前索引元素，索引，原数组")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("['1','2','3'].map(parseInt)\n\n")])])]),t("ul",[t("li",[e._v("第一轮遍历 "),t("code",[e._v("parseInt('1', 0) -> 1")])]),e._v(" "),t("li",[e._v("第二轮遍历 "),t("code",[e._v("parseInt('2', 1) -> NaN")])]),e._v(" "),t("li",[e._v("第三轮遍历 "),t("code",[e._v("parseInt('3', 2) -> NaN")])])]),e._v(" "),t("p",[t("code",[e._v("filter")]),e._v(" 的作用也是生成一个新数组，在遍历数组的时候将返回值为 "),t("code",[e._v("true")]),e._v(" 的元素放入新数组，我们可以利用这个函数删除一些不需要的元素")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let array = [1, 2, 4, 6]\nlet newArray = array.filter(item => item !== 6)\nconsole.log(newArray) // [1, 2, 4]\n\n")])])]),t("p",[e._v("和 "),t("code",[e._v("map")]),e._v(" 一样，"),t("code",[e._v("filter")]),e._v(" 的回调函数也接受三个参数，用处也相同。")]),e._v(" "),t("p",[e._v("最后我们来讲解 "),t("code",[e._v("reduce")]),e._v(" 这块的内容，同时也是最难理解的一块内容。"),t("code",[e._v("reduce")]),e._v(" 可以将数组中的元素通过回调函数最终转换为一个值。")]),e._v(" "),t("p",[e._v("如果我们想实现一个功能将函数里的元素全部相加得到一个值，可能会这样写代码")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const arr = [1, 2, 3]\nlet total = 0\nfor (let i = 0; i < arr.length; i++) {\n  total += arr[i]\n}\nconsole.log(total) //6 \n\n")])])]),t("p",[e._v("但是如果我们使用 "),t("code",[e._v("reduce")]),e._v(" 的话就可以将遍历部分的代码优化为一行代码")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const arr = [1, 2, 3]\nconst sum = arr.reduce((acc, current) => acc + current, 0)\nconsole.log(sum)\n\n")])])]),t("p",[e._v("对于 "),t("code",[e._v("reduce")]),e._v(" 来说，它接受两个参数，分别是回调函数和初始值，接下来我们来分解上述代码中 "),t("code",[e._v("reduce")]),e._v(" 的过程")]),e._v(" "),t("ul",[t("li",[e._v("首先初始值为 "),t("code",[e._v("0")]),e._v("，该值会在执行第一次回调函数时作为第一个参数传入")]),e._v(" "),t("li",[e._v("回调函数接受四个参数，分别为累计值、当前元素、当前索引、原数组，后三者想必大家都可以明白作用，这里着重分析第一个参数")]),e._v(" "),t("li",[e._v("在一次执行回调函数时，当前值和初始值相加得出结果 "),t("code",[e._v("1")]),e._v("，该结果会在第二次执行回调函数时当做第一个参数传入")]),e._v(" "),t("li",[e._v("所以在第二次执行回调函数时，相加的值就分别是 "),t("code",[e._v("1")]),e._v(" 和 "),t("code",[e._v("2")]),e._v("，以此类推，循环结束后得到结果 "),t("code",[e._v("6")])])]),e._v(" "),t("p",[e._v("想必通过以上的解析大家应该明白 "),t("code",[e._v("reduce")]),e._v(" 是如何通过回调函数将所有元素最终转换为一个值的，当然 "),t("code",[e._v("reduce")]),e._v(" 还可以实现很多功能，接下来我们就通过 "),t("code",[e._v("reduce")]),e._v(" 来实现 "),t("code",[e._v("map")]),e._v(" 函数")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const arr = [1, 2, 3]\nconst mapArray = arr.map(value => value * 2)\nconst reduceArray = arr.reduce((acc, current) => {\n  acc.push(current * 2)\n  return acc\n}, [])\nconsole.log(mapArray, reduceArray) // [2, 4, 6]\n\n")])])]),t("p",[e._v("如果你对这个实现还有困惑的话，可以根据上一步的解析步骤来分析过程。")])])}),[],!1,null,null,null);a.default=n.exports}}]);