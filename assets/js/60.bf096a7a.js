(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{543:function(e,t,v){"use strict";v.r(t);var n=v(28),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"手写-promise"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#手写-promise"}},[e._v("#")]),e._v(" 手写 Promise")]),e._v(" "),v("p",[e._v("在上一章节中我们了解了 "),v("code",[e._v("Promise")]),e._v(" 的一些易错点，在这一章节中，我们会通过手写一个符合 Promise/A+ 规范的 "),v("code",[e._v("Promise")]),e._v(" 来深入理解它，并且手写 "),v("code",[e._v("Promise")]),e._v(" 也是一道大厂常考题，在进入正题之前，推荐各位阅读一下 "),v("a",{attrs:{href:"http://www.ituring.com.cn/article/66566",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise/A+ 规范"),v("OutboundLink")],1),e._v("，这样才能更好地理解这个章节的代码。")]),e._v(" "),v("h2",{attrs:{id:"实现一个简易版-promise"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实现一个简易版-promise"}},[e._v("#")]),e._v(" 实现一个简易版 Promise")]),e._v(" "),v("p",[e._v("在完成符合 Promise/A+ 规范的代码之前，我们可以先来实现一个简易版 "),v("code",[e._v("Promise")]),e._v("，因为在面试中，如果你能实现出一个简易版的 "),v("code",[e._v("Promise")]),e._v(" 基本可以过关了。")]),e._v(" "),v("p",[e._v("那么我们先来搭建构建函数的大体框架")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("const PENDING = 'pending'\nconst RESOLVED = 'resolved'\nconst REJECTED = 'rejected'\n\nfunction MyPromise(fn) {\n  const that = this\n  that.state = PENDING\n  that.value = null\n  that.resolvedCallbacks = []\n  that.rejectedCallbacks = []\n  // 待完善 resolve 和 reject 函数\n  // 待完善执行 fn 函数\n}\n\n")])])]),v("ul",[v("li",[e._v("首先我们创建了三个常量用于表示状态，对于经常使用的一些值都应该通过常量来管理，便于开发及后期维护")]),e._v(" "),v("li",[e._v("在函数体内部首先创建了常量 "),v("code",[e._v("that")]),e._v("，因为代码可能会异步执行，用于获取正确的 "),v("code",[e._v("this")]),e._v(" 对象")]),e._v(" "),v("li",[e._v("一开始 "),v("code",[e._v("Promise")]),e._v(" 的状态应该是 "),v("code",[e._v("pending")])]),e._v(" "),v("li",[v("code",[e._v("value")]),e._v(" 变量用于保存 "),v("code",[e._v("resolve")]),e._v(" 或者 "),v("code",[e._v("reject")]),e._v(" 中传入的值")]),e._v(" "),v("li",[v("code",[e._v("resolvedCallbacks")]),e._v(" 和 "),v("code",[e._v("rejectedCallbacks")]),e._v(" 用于保存 "),v("code",[e._v("then")]),e._v(" 中的回调，因为当执行完 "),v("code",[e._v("Promise")]),e._v(" 时状态可能还是等待中，这时候应该把 "),v("code",[e._v("then")]),e._v(" 中的回调保存起来用于状态改变时使用")])]),e._v(" "),v("p",[e._v("接下来我们来完善 "),v("code",[e._v("resolve")]),e._v(" 和 "),v("code",[e._v("reject")]),e._v(" 函数，添加在 "),v("code",[e._v("MyPromise")]),e._v(" 函数体内部")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("function resolve(value) {\n  if (that.state === PENDING) {\n    that.state = RESOLVED\n    that.value = value\n    that.resolvedCallbacks.map(cb => cb(that.value))\n  }\n}\n\nfunction reject(value) {\n  if (that.state === PENDING) {\n    that.state = REJECTED\n    that.value = value\n    that.rejectedCallbacks.map(cb => cb(that.value))\n  }\n}\n\n")])])]),v("p",[e._v("这两个函数代码类似，就一起解析了")]),e._v(" "),v("ul",[v("li",[e._v("首先两个函数都得判断当前状态是否为等待中，因为规范规定只有等待态才可以改变状态")]),e._v(" "),v("li",[e._v("将当前状态更改为对应状态，并且将传入的值赋值给 "),v("code",[e._v("value")])]),e._v(" "),v("li",[e._v("遍历回调数组并执行")])]),e._v(" "),v("p",[e._v("完成以上两个函数以后，我们就该实现如何执行 "),v("code",[e._v("Promise")]),e._v(" 中传入的函数了")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("try {\n  fn(resolve, reject)\n} catch (e) {\n  reject(e)\n}\n\n")])])]),v("ul",[v("li",[e._v("实现很简单，执行传入的参数并且将之前两个函数当做参数传进去")]),e._v(" "),v("li",[e._v("要注意的是，可能执行函数过程中会遇到错误，需要捕获错误并且执行 "),v("code",[e._v("reject")]),e._v(" 函数")])]),e._v(" "),v("p",[e._v("最后我们来实现较为复杂的 "),v("code",[e._v("then")]),e._v(" 函数")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("MyPromise.prototype.then = function(onFulfilled, onRejected) {\n  const that = this\n  onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : v => v\n  onRejected =\n    typeof onRejected === 'function'\n      ? onRejected\n      : r => {\n          throw r\n        }\n  if (that.state === PENDING) {\n    that.resolvedCallbacks.push(onFulfilled)\n    that.rejectedCallbacks.push(onRejected)\n  }\n  if (that.state === RESOLVED) {\n    onFulfilled(that.value)\n  }\n  if (that.state === REJECTED) {\n    onRejected(that.value)\n  }\n}\n\n")])])]),v("ul",[v("li",[v("p",[e._v("首先判断两个参数是否为函数类型，因为这两个参数是可选参数")])]),e._v(" "),v("li",[v("p",[e._v("当参数不是函数类型时，需要创建一个函数赋值给对应的参数，同时也实现了透传，比如如下代码")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("// 该代码目前在简单版中会报错\n// 只是作为一个透传的例子\nPromise.resolve(4).then().then((value) => console.log(value))\n\n")])])])]),e._v(" "),v("li",[v("p",[e._v("接下来就是一系列判断状态的逻辑，当状态不是等待态时，就去执行相对应的函数。如果状态是等待态的话，就往回调函数中 "),v("code",[e._v("push")]),e._v(" 函数，比如如下代码就会进入等待态的逻辑")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("new MyPromise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(1)\n  }, 0)\n}).then(value => {\n  console.log(value)\n})\n\n")])])])])]),e._v(" "),v("p",[e._v("以上就是简单版 "),v("code",[e._v("Promise")]),e._v(" 实现，接下来一小节是实现完整版 "),v("code",[e._v("Promise")]),e._v(" 的解析，相信看完完整版的你，一定会对于 "),v("code",[e._v("Promise")]),e._v(" 的理解更上一层楼。")]),e._v(" "),v("h2",{attrs:{id:"实现一个符合-promise-a-规范的-promise"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实现一个符合-promise-a-规范的-promise"}},[e._v("#")]),e._v(" 实现一个符合 Promise/A+ 规范的 Promise")]),e._v(" "),v("p",[e._v("这小节代码需要大家配合规范阅读，因为大部分代码都是根据规范去实现的。")]),e._v(" "),v("p",[e._v("我们先来改造一下 "),v("code",[e._v("resolve")]),e._v(" 和 "),v("code",[e._v("reject")]),e._v(" 函数")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("function resolve(value) {\n  if (value instanceof MyPromise) {\n    return value.then(resolve, reject)\n  }\n  setTimeout(() => {\n    if (that.state === PENDING) {\n      that.state = RESOLVED\n      that.value = value\n      that.resolvedCallbacks.map(cb => cb(that.value))\n    }\n  }, 0)\n}\nfunction reject(value) {\n  setTimeout(() => {\n    if (that.state === PENDING) {\n      that.state = REJECTED\n      that.value = value\n      that.rejectedCallbacks.map(cb => cb(that.value))\n    }\n  }, 0)\n}\n\n")])])]),v("ul",[v("li",[e._v("对于 "),v("code",[e._v("resolve")]),e._v(" 函数来说，首先需要判断传入的值是否为 "),v("code",[e._v("Promise")]),e._v(" 类型")]),e._v(" "),v("li",[e._v("为了保证函数执行顺序，需要将两个函数体代码使用 "),v("code",[e._v("setTimeout")]),e._v(" 包裹起来")])]),e._v(" "),v("p",[e._v("接下来继续改造 "),v("code",[e._v("then")]),e._v(" 函数中的代码，首先我们需要新增一个变量 "),v("code",[e._v("promise2")]),e._v("，因为每个 "),v("code",[e._v("then")]),e._v(" 函数都需要返回一个新的 "),v("code",[e._v("Promise")]),e._v(" 对象，该变量用于保存新的返回对象，然后我们先来改造判断等待态的逻辑")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("if (that.state === PENDING) {\n  return (promise2 = new MyPromise((resolve, reject) => {\n    that.resolvedCallbacks.push(() => {\n      try {\n        const x = onFulfilled(that.value)\n        resolutionProcedure(promise2, x, resolve, reject)\n      } catch (r) {\n        reject(r)\n      }\n    })\n\n    that.rejectedCallbacks.push(() => {\n      try {\n        const x = onRejected(that.value)\n        resolutionProcedure(promise2, x, resolve, reject)\n      } catch (r) {\n        reject(r)\n      }\n    })\n  }))\n}\n\n")])])]),v("ul",[v("li",[e._v("首先我们返回了一个新的 "),v("code",[e._v("Promise")]),e._v(" 对象，并在 "),v("code",[e._v("Promise")]),e._v(" 中传入了一个函数")]),e._v(" "),v("li",[e._v("函数的基本逻辑还是和之前一样，往回调数组中 "),v("code",[e._v("push")]),e._v(" 函数")]),e._v(" "),v("li",[e._v("同样，在执行函数的过程中可能会遇到错误，所以使用了 "),v("code",[e._v("try...catch")]),e._v(" 包裹")]),e._v(" "),v("li",[e._v("规范规定，执行 "),v("code",[e._v("onFulfilled")]),e._v(" 或者 "),v("code",[e._v("onRejected")]),e._v(" 函数时会返回一个 "),v("code",[e._v("x")]),e._v("，并且执行 "),v("code",[e._v("Promise")]),e._v(" 解决过程，这是为了不同的 "),v("code",[e._v("Promise")]),e._v(" 都可以兼容使用，比如 JQuery 的 "),v("code",[e._v("Promise")]),e._v(" 能兼容 ES6 的 "),v("code",[e._v("Promise")])])]),e._v(" "),v("p",[e._v("接下来我们改造判断执行态的逻辑")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("if (that.state === RESOLVED) {\n  return (promise2 = new MyPromise((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        const x = onFulfilled(that.value)\n        resolutionProcedure(promise2, x, resolve, reject)\n      } catch (reason) {\n        reject(reason)\n      }\n    })\n  }))\n}\n\n")])])]),v("ul",[v("li",[e._v("其实大家可以发现这段代码和判断等待态的逻辑基本一致，无非是传入的函数的函数体需要异步执行，这也是规范规定的")]),e._v(" "),v("li",[e._v("对于判断拒绝态的逻辑这里就不一一赘述了，留给大家自己完成这个作业")])]),e._v(" "),v("p",[e._v("最后，当然也是最难的一部分，也就是实现兼容多种 "),v("code",[e._v("Promise")]),e._v(" 的 "),v("code",[e._v("resolutionProcedure")]),e._v(" 函数")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("function resolutionProcedure(promise2, x, resolve, reject) {\n  if (promise2 === x) {\n    return reject(new TypeError('Error'))\n  }\n}\n\n")])])]),v("p",[e._v("首先规范规定了 "),v("code",[e._v("x")]),e._v(" 不能与 "),v("code",[e._v("promise2")]),e._v(" 相等，这样会发生循环引用的问题，比如如下代码")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("let p = new MyPromise((resolve, reject) => {\n  resolve(1)\n})\nlet p1 = p.then(value => {\n  return p1\n})\n\n")])])]),v("p",[e._v("然后需要判断 "),v("code",[e._v("x")]),e._v(" 的类型")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("if (x instanceof MyPromise) {\n    x.then(function(value) {\n        resolutionProcedure(promise2, value, resolve, reject)\n    }, reject)\n}\n\n")])])]),v("p",[e._v("这里的代码是完全按照规范实现的。如果 "),v("code",[e._v("x")]),e._v(" 为 "),v("code",[e._v("Promise")]),e._v(" 的话，需要判断以下几个情况：")]),e._v(" "),v("ol",[v("li",[e._v("如果 "),v("code",[e._v("x")]),e._v(" 处于等待态，"),v("code",[e._v("Promise")]),e._v(" 需保持为等待态直至 "),v("code",[e._v("x")]),e._v(" 被执行或拒绝")]),e._v(" "),v("li",[e._v("如果 "),v("code",[e._v("x")]),e._v(" 处于其他状态，则用相同的值处理 "),v("code",[e._v("Promise")])])]),e._v(" "),v("p",[e._v("当然以上这些是规范需要我们判断的情况，实际上我们不判断状态也是可行的。")]),e._v(" "),v("p",[e._v("接下来我们继续按照规范来实现剩余的代码")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("let called = false\nif (x !== null && (typeof x === 'object' || typeof x === 'function')) {\n  try {\n    let then = x.then\n    if (typeof then === 'function') {\n      then.call(\n        x,\n        y => {\n          if (called) return\n          called = true\n          resolutionProcedure(promise2, y, resolve, reject)\n        },\n        e => {\n          if (called) return\n          called = true\n          reject(e)\n        }\n      )\n    } else {\n      resolve(x)\n    }\n  } catch (e) {\n    if (called) return\n    called = true\n    reject(e)\n  }\n} else {\n  resolve(x)\n}\n\n")])])]),v("ul",[v("li",[e._v("首先创建一个变量 "),v("code",[e._v("called")]),e._v(" 用于判断是否已经调用过函数")]),e._v(" "),v("li",[e._v("然后判断 "),v("code",[e._v("x")]),e._v(" 是否为对象或者函数，如果都不是的话，将 "),v("code",[e._v("x")]),e._v(" 传入 "),v("code",[e._v("resolve")]),e._v(" 中")]),e._v(" "),v("li",[e._v("如果 "),v("code",[e._v("x")]),e._v(" 是对象或者函数的话，先把 "),v("code",[e._v("x.then")]),e._v(" 赋值给 "),v("code",[e._v("then")]),e._v("，然后判断 "),v("code",[e._v("then")]),e._v(" 的类型，如果不是函数类型的话，就将 "),v("code",[e._v("x")]),e._v(" 传入 "),v("code",[e._v("resolve")]),e._v(" 中")]),e._v(" "),v("li",[e._v("如果 "),v("code",[e._v("then")]),e._v(" 是函数类型的话，就将 "),v("code",[e._v("x")]),e._v(" 作为函数的作用域 "),v("code",[e._v("this")]),e._v(" 调用之，并且传递两个回调函数作为参数，第一个参数叫做 "),v("code",[e._v("resolvePromise")]),e._v(" ，第二个参数叫做 "),v("code",[e._v("rejectPromise")]),e._v("，两个回调函数都需要判断是否已经执行过函数，然后进行相应的逻辑")]),e._v(" "),v("li",[e._v("以上代码在执行的过程中如果抛错了，将错误传入 "),v("code",[e._v("reject")]),e._v(" 函数中")])])])}),[],!1,null,null,null);t.default=a.exports}}]);