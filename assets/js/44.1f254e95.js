(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{527:function(e,n,t){"use strict";t.r(n);var a=t(28),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"vue-常考进阶知识点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-常考进阶知识点"}},[e._v("#")]),e._v(" Vue 常考进阶知识点")]),e._v(" "),t("p",[e._v("这一章节我们将来学习 Vue 的一些经常考到的进阶知识点。这些知识点相对而言理解起来会很有难度，可能需要多次阅读才能理解。")]),e._v(" "),t("h2",{attrs:{id:"响应式原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#响应式原理"}},[e._v("#")]),e._v(" 响应式原理")]),e._v(" "),t("p",[e._v("Vue 内部使用了 "),t("code",[e._v("Object.defineProperty()")]),e._v(" 来实现数据响应式，通过这个函数可以监听到 "),t("code",[e._v("set")]),e._v(" 和 "),t("code",[e._v("get")]),e._v(" 的事件。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var data = { name: 'yck' }\nobserve(data)\nlet name = data.name // -> get value\ndata.name = 'yyy' // -> change value\n\nfunction observe(obj) {\n  // 判断类型\n  if (!obj || typeof obj !== 'object') {\n    return\n  }\n  Object.keys(obj).forEach(key => {\n    defineReactive(obj, key, obj[key])\n  })\n}\n\nfunction defineReactive(obj, key, val) {\n  // 递归子属性\n  observe(val)\n  Object.defineProperty(obj, key, {\n    // 可枚举\n    enumerable: true,\n    // 可配置\n    configurable: true,\n    // 自定义函数\n    get: function reactiveGetter() {\n      console.log('get value')\n      return val\n    },\n    set: function reactiveSetter(newVal) {\n      console.log('change value')\n      val = newVal\n    }\n  })\n}\n\n")])])]),t("p",[e._v("以上代码简单的实现了如何监听数据的 "),t("code",[e._v("set")]),e._v(" 和 "),t("code",[e._v("get")]),e._v(" 的事件，但是仅仅如此是不够的，因为自定义的函数一开始是不会执行的。只有先执行了依赖收集，才能在属性更新的时候派发更新，所以接下来我们需要先触发依赖收集。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<div>\n    {{name}}\n</div>\n\n")])])]),t("p",[e._v("在解析如上模板代码时，遇到 "),t("code",[e._v(e._s(e.name))]),e._v(" 就会进行依赖收集。")]),e._v(" "),t("p",[e._v("接下来我们先来实现一个 "),t("code",[e._v("Dep")]),e._v(" 类，用于解耦属性的依赖收集和派发更新操作。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 通过 Dep 解耦属性的依赖和更新操作\nclass Dep {\n  constructor() {\n    this.subs = []\n  }\n  // 添加依赖\n  addSub(sub) {\n    this.subs.push(sub)\n  }\n  // 更新\n  notify() {\n    this.subs.forEach(sub => {\n      sub.update()\n    })\n  }\n}\n// 全局属性，通过该属性配置 Watcher\nDep.target = null\n\n")])])]),t("p",[e._v("以上的代码实现很简单，当需要依赖收集的时候调用 "),t("code",[e._v("addSub")]),e._v("，当需要派发更新的时候调用 "),t("code",[e._v("notify")]),e._v("。")]),e._v(" "),t("p",[e._v("接下来我们先来简单的了解下 Vue 组件挂载时添加响应式的过程。在组件挂载时，会先对所有需要的属性调用 "),t("code",[e._v("Object.defineProperty()")]),e._v("，然后实例化 "),t("code",[e._v("Watcher")]),e._v("，传入组件更新的回调。在实例化过程中，会对模板中的属性进行求值，触发依赖收集。")]),e._v(" "),t("p",[e._v("因为这一小节主要目的是学习响应式原理的细节，所以接下来的代码会简略的表达触发依赖收集时的操作。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Watcher {\n  constructor(obj, key, cb) {\n    // 将 Dep.target 指向自己\n    // 然后触发属性的 getter 添加监听\n    // 最后将 Dep.target 置空\n    Dep.target = this\n    this.cb = cb\n    this.obj = obj\n    this.key = key\n    this.value = obj[key]\n    Dep.target = null\n  }\n  update() {\n    // 获得新值\n    this.value = this.obj[this.key]\n    // 调用 update 方法更新 Dom\n    this.cb(this.value)\n  }\n}\n\n")])])]),t("p",[e._v("以上就是 "),t("code",[e._v("Watcher")]),e._v(" 的简单实现，在执行构造函数的时候将 "),t("code",[e._v("Dep.target")]),e._v(" 指向自身，从而使得收集到了对应的 "),t("code",[e._v("Watcher")]),e._v("，在派发更新的时候取出对应的 "),t("code",[e._v("Watcher")]),e._v(" 然后执行 "),t("code",[e._v("update")]),e._v(" 函数。")]),e._v(" "),t("p",[e._v("接下来，需要对 "),t("code",[e._v("defineReactive")]),e._v(" 函数进行改造，在自定义函数中添加依赖收集和派发更新相关的代码。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function defineReactive(obj, key, val) {\n  // 递归子属性\n  observe(val)\n  let dp = new Dep()\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter() {\n      console.log('get value')\n      // 将 Watcher 添加到订阅\n      if (Dep.target) {\n        dp.addSub(Dep.target)\n      }\n      return val\n    },\n    set: function reactiveSetter(newVal) {\n      console.log('change value')\n      val = newVal\n      // 执行 watcher 的 update 方法\n      dp.notify()\n    }\n  })\n}\n\n")])])]),t("p",[e._v("以上所有代码实现了一个简易的数据响应式，核心思路就是手动触发一次属性的 getter 来实现依赖收集。")]),e._v(" "),t("p",[e._v("现在我们就来测试下代码的效果，只需要把所有的代码复制到浏览器中执行，就会发现页面的内容全部被替换了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var data = { name: 'yck' }\nobserve(data)\nfunction update(value) {\n  document.querySelector('div').innerText = value\n}\n// 模拟解析到 `{{name}}` 触发的操作\nnew Watcher(data, 'name', update)\n// update Dom innerText\ndata.name = 'yyy' \n\n")])])]),t("h3",{attrs:{id:"object-defineproperty-的缺陷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-defineproperty-的缺陷"}},[e._v("#")]),e._v(" Object.defineProperty 的缺陷")]),e._v(" "),t("p",[e._v("以上已经分析完了 Vue 的响应式原理，接下来说一点 "),t("code",[e._v("Object.defineProperty")]),e._v(" 中的缺陷。")]),e._v(" "),t("p",[e._v("如果通过下标方式修改数组数据或者给对象新增属性并不会触发组件的重新渲染，因为 "),t("code",[e._v("Object.defineProperty")]),e._v(" 不能拦截到这些操作，更精确的来说，对于数组而言，大部分操作都是拦截不到的，只是 Vue 内部通过重写函数的方式解决了这个问题。")]),e._v(" "),t("p",[e._v("对于第一个问题，Vue 提供了一个 API 解决")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("export function set (target: Array<any> | Object, key: any, val: any): any {\n  // 判断是否为数组且下标是否有效\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    // 调用 splice 函数触发派发更新\n    // 该函数已被重写\n    target.length = Math.max(target.length, key)\n    target.splice(key, 1, val)\n    return val\n  }\n  // 判断 key 是否已经存在\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val\n    return val\n  }\n  const ob = (target: any).__ob__\n  // 如果对象不是响应式对象，就赋值返回\n  if (!ob) {\n    target[key] = val\n    return val\n  }\n  // 进行双向绑定\n  defineReactive(ob.value, key, val)\n  // 手动派发更新\n  ob.dep.notify()\n  return val\n}\n\n")])])]),t("p",[e._v("对于数组而言，Vue 内部重写了以下函数实现派发更新")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 获得数组原型\nconst arrayProto = Array.prototype\nexport const arrayMethods = Object.create(arrayProto)\n// 重写以下函数\nconst methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\nmethodsToPatch.forEach(function (method) {\n  // 缓存原生函数\n  const original = arrayProto[method]\n  // 重写函数\n  def(arrayMethods, method, function mutator (...args) {\n  // 先调用原生函数获得结果\n    const result = original.apply(this, args)\n    const ob = this.__ob__\n    let inserted\n    // 调用以下几个函数时，监听新数据\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // 手动派发更新\n    ob.dep.notify()\n    return result\n  })\n})\n\n")])])]),t("h2",{attrs:{id:"编译过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编译过程"}},[e._v("#")]),e._v(" 编译过程")]),e._v(" "),t("p",[e._v("想必大家在使用 Vue 开发的过程中，基本都是使用模板的方式。那么你有过「模板是怎么在浏览器中运行的」这种疑虑嘛？")]),e._v(" "),t("p",[e._v("首先直接把模板丢到浏览器中肯定是不能运行的，模板只是为了方便开发者进行开发。Vue 会通过编译器将模板通过几个阶段最终编译为 "),t("code",[e._v("render")]),e._v(" 函数，然后通过执行 "),t("code",[e._v("render")]),e._v(" 函数生成 Virtual DOM 最终映射为真实 DOM。")]),e._v(" "),t("p",[e._v("接下来我们就来学习这个编译的过程，了解这个过程中大概发生了什么事情。这个过程其中又分为三个阶段，分别为：")]),e._v(" "),t("ol",[t("li",[e._v("将模板解析为 AST")]),e._v(" "),t("li",[e._v("优化 AST")]),e._v(" "),t("li",[e._v("将 AST 转换为 "),t("code",[e._v("render")]),e._v(" 函数")])]),e._v(" "),t("p",[e._v("在第一个阶段中，最主要的事情还是通过各种各样的正则表达式去匹配模板中的内容，然后将内容提取出来做各种逻辑操作，接下来会生成一个最基本的 AST 对象")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{\n    // 类型\n    type: 1,\n    // 标签\n    tag,\n    // 属性列表\n    attrsList: attrs,\n    // 属性映射\n    attrsMap: makeAttrsMap(attrs),\n    // 父节点\n    parent,\n    // 子节点\n    children: []\n}\n\n")])])]),t("p",[e._v("然后会根据这个最基本的 AST 对象中的属性，进一步扩展 AST。")]),e._v(" "),t("p",[e._v("当然在这一阶段中，还会进行其他的一些判断逻辑。比如说对比前后开闭标签是否一致，判断根组件是否只存在一个，判断是否符合 HTML5 "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/Content_categories",target:"_blank",rel:"noopener noreferrer"}},[e._v("Content Model"),t("OutboundLink")],1),e._v(" 规范等等问题。")]),e._v(" "),t("p",[e._v("接下来就是优化 AST 的阶段。在当前版本下，Vue 进行的优化内容其实还是不多的。只是对节点进行了静态内容提取，也就是将永远不会变动的节点提取了出来，实现复用 Virtual DOM，跳过对比算法的功能。在下一个大版本中，Vue 会在优化 AST 的阶段继续发力，实现更多的优化功能，尽可能的在编译阶段压榨更多的性能，比如说提取静态的属性等等优化行为。")]),e._v(" "),t("p",[e._v("最后一个阶段就是通过 AST 生成 "),t("code",[e._v("render")]),e._v(" 函数了。其实这一阶段虽然分支有很多，但是最主要的目的就是遍历整个 AST，根据不同的条件生成不同的代码罢了。")]),e._v(" "),t("h2",{attrs:{id:"nexttick-原理分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nexttick-原理分析"}},[e._v("#")]),e._v(" NextTick 原理分析")]),e._v(" "),t("p",[t("code",[e._v("nextTick")]),e._v(" 可以让我们在下次 DOM 更新循环结束之后执行延迟回调，用于获得更新后的 DOM。")]),e._v(" "),t("p",[e._v("在 Vue 2.4 之前都是使用的 microtasks，但是 microtasks 的优先级过高，在某些情况下可能会出现比事件冒泡更快的情况，但如果都使用 macrotasks 又可能会出现渲染的性能问题。所以在新版本中，会默认使用 microtasks，但在特殊情况下会使用 macrotasks，比如 v-on。")]),e._v(" "),t("p",[e._v("对于实现 macrotasks ，会先判断是否能使用 "),t("code",[e._v("setImmediate")]),e._v(" ，不能的话降级为 "),t("code",[e._v("MessageChannel")]),e._v(" ，以上都不行的话就使用 "),t("code",[e._v("setTimeout")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  macroTimerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n} else if (\n  typeof MessageChannel !== 'undefined' &&\n  (isNative(MessageChannel) ||\n    // PhantomJS\n    MessageChannel.toString() === '[object MessageChannelConstructor]')\n) {\n  const channel = new MessageChannel()\n  const port = channel.port2\n  channel.port1.onmessage = flushCallbacks\n  macroTimerFunc = () => {\n    port.postMessage(1)\n  }\n} else {\n  macroTimerFunc = () => {\n    setTimeout(flushCallbacks, 0)\n  }\n}\n\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);